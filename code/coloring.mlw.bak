(*On va prouver la closure et la terminaison de l'aglo de coloration dans une topologie en anneau*)
 module Coloring_Ring
  use list.List
  use int.Int
  use int.EuclideanDivision
  use map.Map
  use list.Mem
  use set.SetAppInt

 (*PARTIE 1: CLOSURE *)


  (* number of processes*)
  val constant n_nodes : int

  axiom at_least_two : 2 < n_nodes

  (* Nombre de couleur *)
  val constant k_color : int

  (* On suppose qu'il y a plus de couleur que de noeuds (une couleur par noeud) *)
  axiom k_color_bound : n_nodes <= k_color

  type node = int

  (*axiom max_color : forall lS: config. forall i. 0 <= lS i<k *)

  (* On définit le type state avec un invariant pour remplacer l'axiome ci-dessus qui est un true=false *)
  type state = {k: int}
(*  invariant{ 0 <= k < k_color} *)

  type world = map node state

  let predicate validNd (n:node) = 0 <= n < n_nodes


(* Fonction qui renvoie l'ensemble des couleurs(type int et non state) des voisins d'un noeud dans un anneau *)
let function neighbor_set (i:node): set
  ensures { forall c. mem c result -> c <> i} (* un noeud n'est pas son propre voisin *)
  (*ensures { not mem i result }*) (* un noeud n'est pas son propre voisin *)
  ensures {  cardinal result = 2 } (* XXX pour un anneau seulement ! *)
  =
  add (mod (i-1) n_nodes) (add (mod (i+1) n_nodes) (empty()))



(* Fonction qui calcule la plus petite couleur disponible *)
(*prouvable avec Cvc 5 sur la machine d'Erwan, j'ai pas réussi sur cette version de Why3 avec ces solveurs

- 3s avec CVC5 (depuis le top)
*)
let function free (colors: set) (k:int) : int =
  requires { cardinal colors < k }
  ensures { not mem result colors }
  ensures { forall x. (0 <= x < k /\ not mem x colors) -> result <= x }
  ensures { 0 <= result < k }
  min_elt (diff (interval 0 k) colors)


(* modelReadallEnabledDemon est ma version modifié de modelReadallEnabled *)

  clone modelReadallEnabled.World with
    type node,
    type state


(* Dans  modelReadallEnabledDemon, il n'y  a plus d'état  initial, je
laisse la fonction initState en commentaire pour l'instant *)




  let function initState (k:node) : state =
  {k=0}

let function color (w:world) (n:node)  : int =
   (w n).k


let rec function get_colors (nl:set) (w:world) : set =
   requires { cardinal nl < 3 }
   ensures { cardinal result <= cardinal nl }

   (* Nécessaire pour prouver no conflict !! *)
   ensures { forall c. mem c result <-> exists x. mem x nl /\ c = (w x).k }

   variant { cardinal nl }
   if is_empty nl then empty () else
    let n = choose nl in
    let c = color w n in
    add c (get_colors (remove n nl) w)


(* pour un noeud, on regarde ses voisins et on vérifie s'il en existe un qui a la même couleur *)
predicate conflict (lS: world) (n:node) =
   exists c : int.
    mem c (get_colors (neighbor_set n) lS)
   /\ (lS n).k = c
(*   exists c : state. mem c (map lS (neighbor_set n)) /\ (lS n).k = c.k *)

(*   exists c : int. mem c (neighbor_set lS n) /\ (lS n).k = c *)


(*littéralement la négation de conflict *)
predicate couleurDifferentes (w: config) (n: node) = not  conflict w n

(*  forall c: int. mem c (neighbor_set lS i) -> (lS i).k <> c *)



(* enabling predicate *)
let ghost predicate enabled (lS:config) (i:node) =
  conflict lS i


 (* handling function *)
 (* c'est la fonction step de sasa *)
 (* k est la couleur de l'état (par rapport à l'invariant de définition ) *)



let function handleEnbld (n:node) (w:world) : state
  ensures { not mem result.k (get_colors (neighbor_set n) w) }
  =
  { k = free (get_colors (neighbor_set n) w) k_color }


(* C'est une tautologie, Il est nécessaire de donner un invariant au modele *)

predicate inv (w: config) =
  (* Garantir que les états des nœuds sont valides *)
  (*  (forall n: node. 0 <= n < n_nodes ) *)
  (forall n: node. 0 <= n < n_nodes -> 0 <= (w n).k <= k_color)

 let ghost predicate indpred (w:world) = inv w


clone modelReadallEnabled.Steps with
    type node, type state, val validNd, val indpred, val enabled, val handleEnbld, val initState,

(* tout les noeuds sont bien coloriés *)
predicate colored (w: world) =
  forall n1: node.
    validNd n1 ->
    couleurDifferentes w n1


(* renvoie true si pour tout les noeuds il n'y a pas pas de conflits *)
predicate no_conflict (w: world) = forall n: node. not(conflict w n)
  goal goal_colored : forall w, w_init :world. reachable w -> no_conflict w -> colored w


 (*PARTIE 2: TERMINAISON *)

  (* On va utiliser une fonction de measureNode qui compte le nombre de conflit  *)

  let ghost function measureNode (w:world) (n:int) : int
(*  requires { indpred w } *)
  requires { validNd n }
  ensures { result >=0 }
  ensures { result = 1 <-> conflict w n }
  ensures { result = 0 <-> not(conflict w n) }
  =
  if conflict w n then 1 else 0

    (* measure of nodes 0 to n-1
   *)
  let rec ghost function measureNodes (w:world) (n:int) : int
(*    requires { indpred w } *)
    requires { 0 <= n <= n_nodes }
    ensures  { result >= 0 }
    ensures  { result = 0 <-> forall i :int. 0<=i<n -> measureNode w i = 0 }
    variant  { n }
  = if n=0 then 0
    else measureNode w (n-1) + measureNodes w (n-1)

    (* measure of entire ring
     This function is a fundamental part of the specification
     PROPERTY 1 - Before convergence, the measure (which is always non-negative) has a positive value
   *)


  let ghost function measureAllNodes (w:world) : int
(*    requires { indpred w } *)
    ensures  { result >= 0 }
    (* si je mets juste ensures{ not(colored w) -> result > 0} il réussi pas *)
    ensures  { not(colored w) -> exists n:node. not(couleurDifferentes w n) -> (measureNode w n = 1) -> (result> 0)}

    (* R1: j'ai rajouté ca pour pouvoir prouver help_goal *)
    ensures  { result = 0 <-> forall i :int. 0 <= i < n_nodes -> measureNode w i = 0 }

  = measureNodes w n_nodes

    (* delta of a single node i, when k is the stepping node   *)


(* delete me *)
lemma step_preserves_states_bis :
    forall w w' :world, n i :node. step w n w' -> i<>n -> w i = w' i


(* delete me *)
lemma no_conflict_after_step_alt:
      forall w, n.
        let nc = handleEnbld n w in
	let w' = set w n nc in

        not(conflict w' n)

lemma no_conflict_after_step:
      forall w, w', k.
      	        step w k w' -> not(conflict w' k)
	     (* measureNode w' k = 0 *)

(* delete me *)
lemma measure_null_eq_no_conflict:
      forall w, k.
      	     validNd k ->
      	        (measureNode w k = 0 <-> not(conflict w k))



(* delete me *)
lemma measure_null_after_step:
      forall w, w', k.
      	        (step w k w' -> measureNode w' k = 0 )


let rec ghost function measureDeltaNode (w:world) (w':world) (i:int) (k:node) : int
  (*  requires { indpred w } *)
    requires { validNd i /\ validNd k }
    requires { step w k w' }
    ensures {  i =  k /\ measureNode w i = 1 /\  measureNode w' i = 0 -> result = 1 }
  =
    measureNode w i - measureNode w' i


(* delete me *)
lemma prod : forall x y :int. x > 0 -> y > 0 -> x * y >= x /\ x * y >= y

 let rec ghost function measureDeltaNodes (w:world) (w':world) (n:int) (k:node) : int
  (*  requires { indpred w } *)
    requires { 0 <= n <= n_nodes}
    requires { 0 <= n <= n_nodes -> validNd n}
    requires { validNd k }
    requires { step w k w' }
    variant  { n }

  = if n = 0 then measureDeltaNode w w' 0 k
  else measureDeltaNode w w' n k + measureDeltaNodes w w' (n-1) k


  let ghost function measureAllDeltaNodes (w:world) (w':world) (k:node) : int
  (*  requires { indpred w } *)
   requires { validNd k }
   requires { validNd n_nodes}
   requires { step w k w' }
    ensures { result > 0 }
    ensures { result = measureAllNodes w - measureAllNodes w'}
  = measureDeltaNodes w w' n_nodes k



lemma goal_decreasesMeasure : forall w w' :world, k :node.
  (* indpred w /\ *)
  validNd n_nodes -> step w k w' -> measureAllNodes w > measureAllNodes w'



lemma help_goal :
  forall w : world. (measureAllNodes w = 0) <-> (forall n: node. 0 <= n < n_nodes -> measureNode w n = 0)

goal goal_converged : forall w : world. (measureAllNodes w = 0) <-> colored w

goal terminated : forall w : world. (measureAllNodes w = 0) <-> (forall n: node. 0 <= n < n_nodes -> not(enabled w n))

goal convergence :
     (* forall wi : world. *)
     exists w:world, k:int .  step_TR_max initWorld w k /\ measureAllNodes w = 0 
     (* colored w *)

(* XXX montrer la convergence

  *)


(*Controle pour voir s'il n'y a pas de true = false dans le code
   goal trivially_false : 1+1= 3
*)


end