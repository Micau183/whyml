 module Coloring_Ring
  use list.List
  use int.Int
  use int.EuclideanDivision
  use map.Map
  use list.Mem
  use set.SetAppInt

  val constant n_nodes : int

  axiom at_least_3_nodes : 2 < n_nodes 

  val constant k_color : int

  axiom k_color_bound : n_nodes <= k_color 

  type node = int

  type state = {k: int}

  clone modelReadallEnabled.Config with
    type node,
    type state

  let predicate validNd (n:node) = 0 <= n < n_nodes


(* TODO:
  - definir is_neighbor_in_a_ring puis is_neighbor comme un alias
     predicate is_neighbor i j = is_neighbor_in_a_ring i j
  - idem pour neighbor_set

pb: ca oblige à dupliquer les requires/ensures
*)
(* Fonction qui renvoie l'ensemble des couleurs(type int et non state) des voisins d'un noeud dans un anneau *)
(*réécriture explicite du modulo *)

  
predicate is_neighbor (i : int) (j : int) =
  validNd i -> validNd j ->
   if i = 0         then j=1 \/ j=n_nodes-1 else
   if i = n_nodes-1 then j=0 \/ j=n_nodes-2 else
   j = i-1 \/ j = i+1

predicate is_neighbor_in_a_ring (i:int) (j:int) = is_neighbor i j

lemma is_neighbor_symmetric: forall i j. is_neighbor i j = is_neighbor j i



(* Ca fonctionne  bien de définir is_neighbor via  des axiomes ainsi,
  et  de   se  passer   de  neighbor_set.   Ca  évite   les  histoire
  d'arithmetique  non  lineaire  sur  les entiers  (modulo)  que  les
  solveurs SMT détestent.

  Ca peut  peut-etre permettre  de généraliser à  d'autres topologies
  plus facilement.

  *Mais*  ca  oblige [1] à  passer  tout en  ghost,  et  en  particulier
   handleEnbld (le step de sasa).

  [1] enfin, plus précisement, je ne vois pas comment le définir sans
  acces à un  ensemble explicite de voisins, cad,  juste en utilisant
  is_neighbor


inductive is_neighbor int int =
 | symmetric : forall i j.  is_neighbor i j -> is_neighbor j i

axiom at_least_two :
  forall i. exists j k. j<>k -> is_neighbor i j /\ is_neighbor i k
axiom at_most2  : forall i j k.
    j<>k /\ is_neighbor i j /\ is_neighbor i k -> forall l. not is_neighbor i l
axiom anti_refl : forall i j.  is_neighbor i j -> i = j
*)


(* some desirable properties of a good neighborhood *)

lemma not_its_own_neighbor : forall i.  validNd i -> not (is_neighbor i i)



let function neighbor_set (i:node): set
(* prouvable en auto 3 *)
  requires { validNd i }

  ensures { is_neighbor (mod (i-1) n_nodes) i } (* *)
  ensures { is_neighbor (mod (i+1) n_nodes) i } (* *)

  ensures { forall c. mem c result -> c <> i} (* un noeud n'est pas son propre voisin *)
  (*ensures { not mem i result }*) (* un noeud n'est pas son propre voisin *)
  ensures {  cardinal result = 2 } (* ZZZ pour un anneau seulement ! *)
  ensures { forall j. mem j result -> validNd j }
  ensures { forall j. mem j result -> is_neighbor  i j }
  ensures { forall j. validNd j -> is_neighbor i j -> mem j result }
(*  ensures { forall j. mem j result <-> is_neighbor j i } *)
  =
  let next = mod (i+1) n_nodes in
  let prev = mod (i-1) n_nodes in
  add next (add prev (empty()))

(* actually not used *)
(*
lemma  neighborhood_is_symmetric: forall i j .
  validNd i -> validNd j ->
    mem i (neighbor_set j) -> mem j (neighbor_set i)
*)



let function free (colors: set) (k:int) : int =
  requires { cardinal colors < k }
  ensures { not mem result colors }
  ensures { forall x. (0 <= x < k /\ not mem x colors) -> result <= x }
  ensures { 0 <= result < k }
  min_elt (diff (interval 0 k) colors)





let function initState (k:node) : state = {k=0}

let function color (c:config) (n:node) : int = (c n).k

let rec function get_colors (nl:set) (c:config) : set =
   requires { cardinal nl < 3 }
   ensures { cardinal result <= cardinal nl }

   (* Nécessaire pour prouver no conflict !! *)
   ensures { forall coul. mem coul result <-> exists x. mem x nl /\ coul = (c x).k }

   variant { cardinal nl }
   if is_empty nl then empty () else
    let n = choose nl in
    let coul = color c n in
    add coul (get_colors (remove n nl) c)


(* pour un noeud, on regarde ses voisins et on vérifie s'il en existe un qui a la même couleur *)
predicate conflict (c: config) (n:node) =
   exists coul : int.
     mem coul (get_colors (neighbor_set n) c) /\ (c n).k = coul

(* The same as conflict but not ghost! *)
let predicate enabled (c:config) (n:node)
 ensures { validNd n -> result = conflict c n }
 =  validNd n &&  mem (c n).k (get_colors (neighbor_set n) c)


(* handling function *)
 (* c'est la fonction step de sasa *)
 (* k est la couleur de l'état (par rapport à l'invariant de définition ) *)
let function handleEnbld (n:node) (c:config) : state
  requires { validNd n }
  ensures { not mem result.k (get_colors (neighbor_set n) c) }
  ensures { forall i. mem i (neighbor_set n) -> not conflict c i -> not conflict (set c n result) i }
  =
  { k = free (get_colors (neighbor_set n) c) k_color }


(* Il est nécessaire de donner un invariant au modele *)
predicate inv (c: config) =
  (* Garantir que les états des nœuds sont valides *)
  (*  (forall n: node. 0 <= n < n_nodes ) *)
  (forall n: node. 0 <= n < n_nodes -> 0 <= (c n).k <= k_color)

 let ghost predicate indpred (c:config) = inv c


clone modelReadallEnabled.Steps with
    type node, type state, val validNd, val indpred, val enabled, val handleEnbld, val initState



 (*PARTIE 2: TERMINAISON *)

let ghost function potential_node (c:config) (n:int) : int
  ensures { 0 <= result <= 1 }
  ensures { result = 1 <-> conflict c n }
  =
  if conflict c n then 1 else 0

let rec ghost function potential_i (c:config) (i:int) : int
    requires { validNd i }
    ensures  { result >= 0 }
    ensures  { result = 0 <-> forall j :int. 0<=j<=i -> potential_node c j = 0 }
    variant  { i }
  =
	let pot_i = if conflict c i then 1 else 0 in
	if i=0 then pot_i
               else pot_i + potential_i c (i-1)




(* measure of entire ring
    This function is a fundamental part of the specification
    PROPERTY 1 - Before convergence, the measure (which is always non-negative) has a positive value
  *)
let ghost function potential (c:config) : int
(*    requires { indpred w } *)
    ensures  { result >= 0 }
    (* si je mets juste ensures{ not(colored w) -> result > 0} il réussi pas *)
    ensures  {  exists n:node. conflict c n -> (potential_node c n = 1) -> (result> 0)}

    ensures  { result = 0 <-> forall i :int. 0 <= i < n_nodes -> potential_node c i = 0 }

  = potential_i c (n_nodes-1)

    (* delta of a single node i, when k is the stepping node   *)


lemma step_on_n_preserves_other_nodes :
    forall c c' :config, n i :node. step c n c' -> i<>n -> c i = c' i


lemma no_conflict_after_step: forall c, c', k. step c k c' -> not(conflict c' k)

(* delete me *)
(*
lemma measure_null_eq_no_conflict:
      forall w, k. validNd k -> (potential_node w k = 0 <-> not(conflict w k))


(* delete me *)
lemma measure_null_after_step:
      forall w, w', k. (step w k w' -> potential_node w' k = 0 )

*)
lemma step_influences_neighborhood_only: forall c c' n i.
  step c n c' ->
     not is_neighbor i n /\ i <> n -> c i = c' i


(*  measure the difference of potential|[0,i] (restricted to nodes [0,i]) after a step of node k
    positive_before is true if exists j>i -> delta_i_k > 1
 *)
let rec ghost function deltaPotAfterStep_i (c:config) (c':config) (i:int) (n:node) (pos : bool) (delta:int) : int
  (*  requires { indpred w } *)
    requires { validNd i }
    requires { validNd n }
    requires { step c n c' }
    requires { pos <-> exists j. i<j<n_nodes /\ j = n }

    ensures { i = n -> result > 0 }
    ensures  { not pos -> result > 0 }
    ensures  { result >= 0 }
    ensures  { result = potential_i c i - potential_i c' i  }
    variant  { i }
  =
    let delta_i_n = potential_node c i - potential_node c' i in
    if i = 0 then delta_i_n
             else delta_i_n + deltaPotAfterStep_i c c' (i-1) n (pos || i=n ) (delta+delta_i_n)

(* measure the difference of potential after a step of node k
   step w k w' : pot(w) - pot(w') *)
let ghost function deltaPotAfterStep (c:config) (c':config) (k:node) : int
  (*  requires { indpred w } *)
   requires { validNd k }
   requires { step c k c' }
    ensures { result > 0 }
 (*   ensures { potential w > potential w'} *)
    ensures { result = potential c - potential c'}
  = deltaPotAfterStep_i c c' (n_nodes-1) k false 0



lemma the_potential_decreases_after_a_step : forall c c' : config, n :node.
  validNd n -> step c n c' -> potential c > potential c'



lemma config_potential_is_null_iff_all_states_one_are_null :
  forall c : config. (potential c = 0) <-> (forall n: node. 0 <= n < n_nodes -> potential_node  c n = 0)

use list.ListRich
(*
let rec ghost function get_enabled_list (c:config) (n:int) : list int =
 requires { validNd n }
 ensures { Length.length result <= n }
 ensures { forall node. mem node result -> validNd node }
 variant { n }
  if n = 0 then Nil else
    let rest = get_enabled_list c (n-1) in
    if conflict c n then Cons n rest else rest
*)
(*predicate config_eq (c:config) (c':config) =
   forall n.  validNd n -> c n = c' n
*)
(*
use list.Quant
let rec ghost function step_TR_alt (c:config) (c':config) (k:int) : bool =
 variant { potential c }
    if (config_eq c c') then true
    else if potential c = 0 then false
    else
      let enabled_nodes = get_enabled_list c (n_nodes-1) in
      if List.is_nil enabled_nodes then false else
        Quant.for_some
	  (fun n -> (* [1]: validNd n *)
	   validNd n && (* should not be necessary. Well.*)
  	     let c'' = step_enbld c n (handleEnbld n c) in
             step c n c'' &&
             step_TR_alt c'' c' (k-1)
	  )
	  enabled_nodes
*)
(*
(* Seul vampire y arrive, et en moins d'une seconde. Louche ? *)
goal convergence_alt :
     (* forall wi : world. *)
     exists c:config, k:int .  step_TR_alt initConfig c k /\ potential c = 0
     (* colored w *)
*)

(**************************************************************************)
(* utile ?

je met ici tout ce qui ne me semble pas utile, mais qui est prouvable *)

(* Une version plus explicite de step, que je prouve être equivalent (avec vampire).

Mais finalement,  je ne m'en sers pas dans la suite.
 *)
 (*
let ghost function step_alt w n =
  requires { validNd n }
  requires { enabled w n }
  ensures { forall i. is_neighbor i n -> not conflict w i -> not conflict result i }
  ensures { forall i. validNd n -> is_neighbor i n -> not conflict w i -> not conflict result i }
  ensures { step w n result }
    set w n (handleEnbld n w)
*)
(*
lemma step_and_step_alt_coincide: forall w n w'.
  validNd n ->
  enabled w n ->
   step_alt w n = w' <-> step w n w'
*)

(* renvoie true si pour tout les noeuds il n'y a pas pas de conflits *)
predicate no_conflict (c: config) = forall n: node. not(conflict c n)

(* tout les noeuds sont bien coloriés *)
predicate colored (c: config) =
  forall n: node.
    validNd n -> not conflict c n


goal goal_colored : forall c, c_init :config. reachable c -> no_conflict c -> colored c

goal goal_converged : forall c : config. (potential c = 0) <-> colored c



let rec ghost function potential_i_j (c:config) (i j:int) : int
(*    requires { indpred w } *)
    requires { validNd i }
    requires { validNd j }
    requires { i<=j }
    ensures  { result >= 0 }
    ensures  { result = 0 <-> forall k :int. i<=k<=j -> potential_node c k = 0 }
    variant  { j }
  =
	let pot_j = if conflict c j then 1 else 0 in
	if j=i then pot_j
               else pot_j + potential_i_j c i (j-1)

lemma check_potential_i_j : forall c i. validNd i -> i <= 0 -> potential_i_j c 0 i = potential_i c i

(* Je ne sais pas si ca peut servir, mais c'est prouvable par induction sur j
   Comment lui dire ? le [@induction] ne fonctionne pas  *)

lemma split_potential_i_j: forall c i j [@induction] k.
  validNd i -> validNd j -> validNd k -> validNd (k+1) ->
   i <= k /\ k+1 <= j -> potential_i_j c i k + potential_i_j c (k+1) j = potential_i_j c i j

(* by induction on j *)

(**************************************************************************)
(* XXX TODO ? step_TR_alt converge par construction

le lemme ci-dessous permet de montretr 1+1=3 avec vampire. Louche.
*)
(*
lemma step_TR_and_step_TR_alt_coincide:
  forall w  k . step_TR_alt initConfig w k -> exists k.  step_TR initConfig w k
*)
goal trivially_false : 1+1= 3



(* XXX montrons la convergence
goal convergence :
     (* forall wi : world. *)
     exists c:config, k:int .  step_TR initConfig c k /\ potential c = 0
     (* colored w *)

goal convergence_alt :
     (* forall wi : world. *)
     exists c:config, k:int .  step_TR initConfig c k /\ potential c = 0
     (* colored w *)

*)



(*Controle pour voir s'il n'y a pas de true = false dans le code *)



end
