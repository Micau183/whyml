module SelfStab_Biarray

  use int.Int
  use map.Map

  (* Basic Setup: nodes, packets, inputs, outputs, states *)

  type node = int

  (* number of processes *)
  val constant n_nodes : int

  let predicate validNd (n:node) = 0 <= n < n_nodes

  axiom at_least_two : 2 < n_nodes <= 10

  type state = Zero | One | Two | Three

  let function incre (x:state) : state
  = match x with
    | Zero -> One
    | One -> Two
    | Two -> Three
    | Three -> Zero
    end

  lemma state_lm : forall x y :state.
    x = y \/ x = incre y \/ x = incre(incre y) \/ y =incre x

  clone modelReadallEnabled.World with
    type node,
    type state
  
  let function initState (k:node) : state
  = if k=0 then One else Two

  (* defining when a node in the ring has the token *)
  predicate has_token (lS:map node state) (i:node) =
    let si = incre (lS i) in
    (i > 0 && i < n_nodes /\ lS (i-1) = si) \/
    (i >= 0 /\ i < n_nodes-1 /\ lS (i+1) = si)

  (* enabling predicate *)
  let ghost predicate enabled (lS:map node state) (i:node)
  = has_token lS i

  (* handling function *)
  let function handleEnbld (h:node) (lS:map node state) : state
  = if h = 0 || h = n_nodes-1 then incre(incre (lS h))
                              else incre (lS h)
    (* helper definitions for invariant predicate *)
  let rec ghost predicate noTokens (lS:map node state) (n:int)
    requires { 0 <= n <= n_nodes }
    ensures { result <-> forall k :int. 0<=k<n -> not(has_token lS k) }
    variant { n }
  = n = 0 || (not(has_token lS (n-1)) && noTokens lS (n-1))

  let rec ghost predicate atLeastOneToken (lS:map node state) (n:int)
    requires { 0 <= n <= n_nodes }
    ensures { result <-> exists k :int. 0<=k<n /\ has_token lS k }
    variant { n }
  = n > 0 && (has_token lS (n-1) || atLeastOneToken lS (n-1))

  let rec ghost predicate atMostOneToken (lS:map node state) (n:int)
    requires { 0 <= n <= n_nodes }
    ensures { result <-> forall i j :int. 0<=i<n -> 0<=j<n -> has_token lS i -> has_token lS j -> i=j }
    variant { n }
  = n = 0 || (has_token lS (n-1) && noTokens lS (n-1))
    || (not(has_token lS (n-1)) && atMostOneToken lS (n-1))
    
    (* candidate invariant predicate *)
  predicate inv (lS:map node state) =
    (lS 0 = One \/ lS 0 = Three)
    /\ (lS (n_nodes-1) = Zero \/ lS (n_nodes-1) = Two)
    /\ atMostOneToken lS n_nodes
    /\ (forall i :int. 0<i<n_nodes-1  ->
        let si = incre (lS i) in
          (lS (i-1) = si -> lS (i+1) <> si)
          /\ (lS (i+1) = si -> lS (i-1) <> si) )
    /\ atLeastOneToken lS n_nodes
    
  let ghost predicate indpred (w:world) = inv w

  clone modelReadallEnabled.Steps with
    type node, type state, val validNd, val initState, val indpred, val enabled, val handleEnbld
    
  

  (* system property to be proved *)
  predicate oneToken (w:world) = atMostOneToken w n_nodes /\ atLeastOneToken w n_nodes

  goal oneToken : forall w :world. reachable w -> oneToken w
    
end(* module SelfStab_Biaray*)