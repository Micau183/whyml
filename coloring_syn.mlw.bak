(*On va prouver la closure et la terminaison de l'aglo de coloration dans une topologie en anneau*)
 module Coloring_Ring2
  use list.List
  use int.Int
  use int.EuclideanDivision
  use map.Map
  use list.Mem
  use list.Length
  use ref.Ref
  use set.SetAppInt
  
 (*PARTIE 1: CLOSURE *)
 
 
  (* Basic Setup: nodes, packets, inputs, outputs, states 
  Nos noeuds et nos couleurs sont des entiers *)

  type node = int
  
  type state = int

  (* number of processes*)
  val constant n_nodes : int

  let predicate validNd (n:node) = 0 <= n 

  axiom at_least_two : 2 < n_nodes

  
  (* Nombre de couleur *)
  val constant k_color : int
  
  val color : int

  (* On suppose qu'il y a plus de couleur que de noeuds (une couleur par noeud) *)
  axiom k_color_bound : n_nodes <= k_color  
  
  (*Peu importe le graphe, un noeud doit avoir une valeur comprise entre 0 et k_color 
  peu probablement être changé en lemma et prouvé (sert à prouver enabled'refnvc) *)
  axiom max_color : forall lS: map node state. forall i. 0<=lS i <k_color 


(* Fonction qui renvoie l'ensemble des voisins d'un noeud dans un anneau *)

let function neighbor_set (lS:map node state) (i:node): set
requires {forall i. 0<= (lS i) < k_color } 
ensures {forall v. mem v result -> (0<= v < k_color)} 
ensures { mem (lS (mod(i-1) n_nodes)) result}
ensures { mem (lS (mod(i+1) n_nodes)) result}
ensures {cardinal result < n_nodes} =
add (lS (mod(i-1) n_nodes)) (add (lS (mod(i+1) n_nodes)) (empty()))


(* Fonction qui calcule la plus petite couleur disponible *)
let function free (colors: set) (k:int) : int =
requires { 1 < k }
requires { subset colors (interval 0 k) }
requires { not (colors == (interval 0 k)) }
requires { not colors == empty }

  ensures { 0 <= result < k }
  ensures { not mem result colors }
  ensures { forall x. (0 <= x <=k /\ not mem x colors) -> result <= x }
  min_elt (diff  (interval 0 k) colors)



(* modelReadallEnabledDemon est ma version modifié de modelReadallEnabled *)

  clone modelReadallEnabledForAll.World with
    type node,
    type state
    
  
(* Dans modelReadallEnabledDemon, il n'y a plus d'état initial, je laisse la fonction initState en commentaire pour l'instant *)

(*
  let function initState (k:node) : state =
  0
  *)
 
 
(* renvoie true si l'un des voisins à la même couleur *)
  predicate conflict (lS: map node state) (i:node) = 
  exists v :state. mem v (neighbor_set lS i) -> lS i = lS v


 
  (* enabling predicate *)
  let ghost predicate enabled (lS:map node state) (i:node) 
  requires{forall i. 0<= lS i < k_color} =
  (* let nl = neighbor_set lS i in *) 
  conflict lS i 
  

  
 (* handling function *)
 (* c'est la fonction step de sasa *)
  let function handleEnbld (h:node) (lS:map node state) : state
    requires{forall i. 0 <= lS i <k_color} 
    requires{ exists i. conflict lS i }
    
  = free (neighbor_set lS h) k_color 
  


predicate couleurDifferentes (lS: map node state) (n1: node) = 
forall n2: node. mem n2 (neighbor_set lS n1) -> lS n1 <> lS n2




predicate inv (lS: map node state) =
  (* Garantir que les états des nœuds sont valides *)
  (forall n: node. 0 <= n < n_nodes -> 0 <= lS n < k_color) 
  (* S'ils sont voisins alors ils ont des couleurs différentes ou alors il y a conflict entre n1 n2 donc on appelle conflict sur n1 ou n2 *)
  /\ (forall n1: node. validNd n1 -> (couleurDifferentes lS n1 \/ conflict lS n1))
  

  
  let ghost predicate indpred (w:world) = inv ( w)


  clone modelReadallEnabledForAll.Steps with
    type node, type state, val validNd, val indpred, val enabled, val handleEnbld
    
(* tout les noeuds sont bien coloriés *)
predicate colored (w: world) =
  forall n1: node.
    validNd n1 ->
    couleurDifferentes w n1 
    

(* renvoie true si pour tout les noeuds il n'y a pas pas de conflits *)
predicate no_conflict (w: world) = forall n: node. not(conflict w n)
    
    
    

  goal colored : forall w, w_init :world. reachable w_init w -> no_conflict w -> colored w
  
  
 (*PARTIE 2: TERMINAISON *)
  
  (* On va utiliser une fonction de potentiel energy qui compte le nombre de conflit  *)
 let ghost function energy (w:world) : int 
     requires { indpred w }
     ensures  { result >= 0 }
     ensures { exists i: node. conflict w i -> result > 0 }
     =
  let energy_count = ref 0 in 
  for i = 0 to n_nodes - 1 do 
    if conflict w i then energy_count := !energy_count + 1
  done;
  !energy_count 
  
  (*On calcule le delta entre chaque step*)
  (*Dans modelReadallEnabledDemon, step n'a plus la signature step world node world mais step world fset node world 
  où fset node est un ensemble de noeud *)
  
  let ghost function deltaEnergy (w:world) (w':world) (n: node) : int
    requires { indpred w }
    requires { step w n w' } 
    ensures { if energy w = 0 then result = 0 else result <> 0}
    = energy w - energy w'
 
 (*On montre que à chaque step fait décroitre strictement la valeur d'energy. 
  De plus nous avons définit que energy était strictement positif dans sa définition *)

(* indpred tautologie, on peut la supprimer ? *)
   goal step_decreasesEnergy : forall w w' :world, n : node.
    (*indpred w -> *)step w n w' -> energy w' < energy w
    
   goal converged : forall w : world. (energy w = 0) <-> colored w  
    
end