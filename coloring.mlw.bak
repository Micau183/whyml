module ColoringClosure
  use list.List
  use int.Int
  use int.EuclideanDivision
  use map.Map
  use list.Mem
  use list.Length
  use ref.Ref
  use list.SortedInt
  use list.HdTl
  (* Basic Setup: nodes, packets, inputs, outputs, states *)

  type node = int
  
  type state = int

  (* number of processes *)
  val constant n_nodes : int

  let predicate validNd (n:node) = 0 <= n 

  axiom at_least_two : 2 < n_nodes

  
  (* Nombre de couleur *)
  val constant k_color : int
  
  val color : int

  (* On suppose qu'il y au plus autant de couleur que de noeuds (une couleur par noeud) *)
  axiom k_color_bound : n_nodes <= k_color  


let function neighbor_list (lS:map node state) (i:node): list state =
 Cons (lS (mod (i+1) n_nodes)) (Cons (lS (mod (i+1) n_nodes)) Nil) 

let function min_color(lS:map node state) (i:node) (neighbor_colors: list state) : state =
(*on renvoie une couleur au hasard mais on certifie que c'est la couleur correcte*)
    ensures {forall v. mem v neighbor_colors /\ result <> v }
    ensures {forall v. result < v /\ mem v neighbor_colors}
    ensures {result <= k_color+1}
    lS (mod (i+1) n_nodes)
 

  clone modelReadallEnabled.World with
    type node,
    type state
    
  (*
  (* On choisit comme état initial un graph d'une unique couleur *)
  let function initState (k:node) : state
  = 0
  *)
  
  (* On regarde si les voisins ont la même couleur que nous*)
  predicate conflict (lS: map node state) (i:node) =
  
  (*on regarde avant et après modulo le nombre de noeud*)
  (lS i = lS (mod(i-1) n_nodes) /\ lS i = lS (mod(i+1) n_nodes))

  
  
  (* enabli ng predicate *)
  let ghost predicate enabled (lS:map node state) (i:node)
  = conflict lS i
  

  
 (* handling function *)
  let function handleEnbld (h:node) (lS:map node state) : state
  = min_color lS h (neighbor_list lS h)
  
  (* Vérifie si deux nœuds sont voisins *)
let ghost function etreVoisin (n1: node) (n2: node) : bool 
  requires { validNd n1 && validNd n2 } (* Les nœuds doivent être valides *)
  ensures { result <-> n1 = mod (n2 + 1) n_nodes || n1 = mod(n2 - 1) n_nodes } 
  (* Le résultat est vrai si les nœuds sont voisins sur l'anneau *)
=
  (n1 = mod (n2 + 1) n_nodes || n1 = mod (n2 - 1) n_nodes )

(* Vérifie si deux nœuds ont des couleurs différentes *)
let ghost function couleurDifferentes (lS: map node state) (n1: node) (n2: node) : bool 
  requires { validNd n1 && validNd n2 } (* Les nœuds doivent être valides *)
  ensures { result <-> (lS n1 <> lS n2) } 
  (* Le résultat est vrai si les couleurs des nœuds sont différentes *)
=
  lS n1 <> lS n2
  
(*
lemma differentColorsLemma : forall w :world, n1 n2 : node.
  validNd n1 /\ validNd n2 /\ etreVoisin n1 n2 ->
  couleurDifferentes w n1 n2
*)

predicate inv (lS: map node state) =
  (* Garantir que les états des nœuds sont valides *)
  (forall n: node. 0 <= n < n_nodes -> 0 <= lS n < k_color) 
  (* S'ils sont voisins alors ils ont des couleurs différentes *)
  /\ (forall n1 n2: node. validNd n1 && validNd n2 && etreVoisin n1 n2 -> couleurDifferentes lS n1 n2)
  

  
  let ghost predicate indpred (w:world) = inv ( w)

  clone modelReadallEnabled.Steps with
    type node, type state, val validNd, val initState, val indpred, val enabled, val handleEnbld
    

predicate colored (w: world) =
  forall n1 n2: node.
    validNd n1 && validNd n2 && etreVoisin n1 n2 ->
    couleurDifferentes w n1 n2

  (*predicate colored (w:world) = (noConflict w n_nodes) *) 

  goal colored : forall w :world. reachable w -> colored w
  
  end
  
  (* TERMINAISON *)
 module ColoringTerminaison
  use list.List
  use int.Int
  use int.EuclideanDivision
  use map.Map
  use list.Mem
  use list.Length
  use ref.Ref
  use list.SortedInt
  use list.HdTl
  (* Basic Setup: nodes, packets, inputs, outputs, states *)

  type node = int
  
  type state = int

  (* number of processes *)
  val constant n_nodes : int

  let predicate validNd (n:node) = 0 <= n 

  axiom at_least_two : 2 < n_nodes

  
  (* Nombre de couleur *)
  val constant k_color : int
  
  val color : int

  (* On suppose qu'il y au plus autant de couleur que de noeuds (une couleur par noeud) *)
  axiom k_color_bound : n_nodes <= k_color  


let function neighbor_list (lS:map node state) (i:node): list state =
 Cons (lS (mod (i+1) n_nodes)) (Cons (lS (mod (i+1) n_nodes)) Nil) 

let function min_color(lS:map node state) (i:node) (neighbor_colors: list state) : state =
(*on renvoie une couleur au hasard mais on certifie que c'est la couleur correcte*)
    ensures {forall v. mem v neighbor_colors /\ result <> v }
    ensures {forall v. result < v /\ mem v neighbor_colors}
    ensures {result <= k_color+1}
    lS (mod (i+1) n_nodes)
 

  clone modelReadallEnabled.World with
    type node,
    type state
    
  
  (* On choisit comme état initial un graph d'une unique couleur *)
  let function initState (k:node) : state
  = 0
  
  (* On regarde si les voisins ont la même couleur que nous*)
  predicate conflict (lS: map node state) (i:node) =
  
  (*on regarde avant et après modulo le nombre de noeud*)
  (lS i = lS (mod(i-1) n_nodes) /\ lS i = lS (mod(i+1) n_nodes))

  
  
  (* enabli ng predicate *)
  let ghost predicate enabled (lS:map node state) (i:node)
  = conflict lS i
  

  
 (* handling function *)
  let function handleEnbld (h:node) (lS:map node state) : state
  = min_color lS h (neighbor_list lS h)
  
  (* Vérifie si deux nœuds sont voisins *)
let ghost function etreVoisin (n1: node) (n2: node) : bool 
  requires { validNd n1 && validNd n2 } (* Les nœuds doivent être valides *)
  ensures { result <-> n1 = mod (n2 + 1) n_nodes || n1 = mod(n2 - 1) n_nodes } 
  (* Le résultat est vrai si les nœuds sont voisins sur l'anneau *)
=
  (n1 = mod (n2 + 1) n_nodes || n1 = mod (n2 - 1) n_nodes )

(* Vérifie si deux nœuds ont des couleurs différentes *)
let ghost function couleurDifferentes (lS: map node state) (n1: node) (n2: node) : bool 
  requires { validNd n1 && validNd n2 } (* Les nœuds doivent être valides *)
  ensures { result <-> (lS n1 <> lS n2) } 
  (* Le résultat est vrai si les couleurs des nœuds sont différentes *)
=
  lS n1 <> lS n2
  


predicate inv (lS: map node state) =
  (* Garantir que les états des nœuds sont valides *)
  (forall n: node. 0 <= n < n_nodes -> 0 <= lS n < k_color) 
  (* S'ils sont voisins alors ils ont des couleurs différentes *)
  /\ (forall n1 n2: node. validNd n1 && validNd n2 && etreVoisin n1 n2 -> couleurDifferentes lS n1 n2)
  

  
  let ghost predicate indpred (w:world) = inv ( w)

  clone modelReadallEnabled.Steps with
    type node, type state, val validNd, val initState, val indpred, val enabled, val handleEnbld
    

predicate colored (w: world) =
  forall n1 n2: node.
    validNd n1 && validNd n2 && etreVoisin n1 n2 ->
    couleurDifferentes w n1 n2

  (*predicate colored (w:world) = (noConflict w n_nodes) *) 

  goal colored : forall w :world. reachable w -> colored w
  
  
  
  let predicate case_node (_node) = true
  let predicate case_state (_state) = true
  
 let ghost function energy (w:world) : int 
     requires { indpred w }
     ensures  { result >= 0 }
     ensures { exists i: node. conflict w i -> result > 0 }
     =
  let energy_count = ref 0 in 
  for i = 0 to n_nodes - 1 do 
    if conflict w i then energy_count := !energy_count + 1
  done;
  !energy_count 
  
  let ghost function deltaEnergy (w:world) (w':world) (k:node) : int
    requires { indpred w }
    requires { step w k w' } 
    ensures { if energy w = 0 then result = 0 else result <> 0}
    = energy w - energy w'
 
   goal step_decreasesEnergy : forall w w' :world, k :node.
    indpred w -> step w k w' -> energy w' < energy w
    
   goal converged : forall w : world. (energy w = 0) <-> colored w 
    
end