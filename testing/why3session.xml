<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Vampire" version="4.5.1" timelimit="60" steplimit="0" memlimit="2000"/>
<prover id="4" name="CVC4" version="1.8" alternative="counterexamples" timelimit="60" steplimit="0" memlimit="2000"/>
<file format="whyml">
<path name=".."/><path name="testing.mlw"/>
<theory name="FreeSet" proved="true">
 <goal name="free&#39;vc" expl="VC for free" proved="true">
 <proof prover="0" timelimit="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="1459987"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="96309"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="free&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="9082"/></proof>
  </goal>
  <goal name="free&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0" timelimit="1"><result status="valid" time="0.13" steps="641"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="1520946"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="135130"/></proof>
  </goal>
  <goal name="free&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.26" steps="32765"/></proof>
  </goal>
  <goal name="free&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0" timelimit="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="1450291"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="138821"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="free&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0" memlimit="2000"><result status="timeout" time="5.00"/></proof>
   <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="8638574"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="728526"/></proof>
   <transf name="inline_goal" proved="true" >
    <goal name="free&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="free&#39;vc.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="0" memlimit="2000"><result status="timeout" time="5.00"/></proof>
     <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="5300607"/></proof>
     <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="1377244"/></proof>
     <transf name="inline_goal" proved="true" >
      <goal name="free&#39;vc.3.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.00"/></proof>
      <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="32598824"/></proof>
      <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="7253471"/></proof>
      <proof prover="3"><result status="valid" time="42.46"/></proof>
      <proof prover="4"><result status="highfailure" time="0.03" steps="47"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="PigeonholeProof">
 <goal name="mem_list&#39;vc" expl="VC for mem_list">
 </goal>
 <goal name="min_color_list&#39;vc" expl="VC for min_color_list">
 </goal>
</theory>
<theory name="Testing">
 <goal name="random_number_between_0_and_n&#39;vc" expl="VC for random_number_between_0_and_n">
 <proof prover="0" obsolete="true"><result status="valid" time="0.01" steps="0"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.11" steps="11618"/></proof>
 </goal>
 <goal name="random_example&#39;vc" expl="VC for random_example">
 <proof prover="0" obsolete="true"><result status="valid" time="0.01" steps="4"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="12529"/></proof>
 </goal>
 <goal name="n_list&#39;vc" expl="VC for n_list">
 <proof prover="0" obsolete="true"><result status="valid" time="0.03" steps="56"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.22" steps="17229"/></proof>
 </goal>
 <goal name="mem_list&#39;vc" expl="VC for mem_list">
 <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="39"/></proof>
 <proof prover="2" obsolete="true"><result status="valid" time="0.15" steps="14939"/></proof>
 </goal>
 <goal name="min_color_list&#39;vc" expl="VC for min_color_list">
 <proof prover="0" timelimit="1"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="1963484"/></proof>
 <proof prover="2"><result status="timeout" time="1.00" steps="283029"/></proof>
 <transf name="split_vc" >
  <goal name="min_color_list&#39;vc.0" expl="variant decrease">
  <proof prover="0" timelimit="1"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="1643096"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="143833"/></proof>
  <transf name="split_vc" >
   <goal name="min_color_list&#39;vc.0.0" expl="variant decrease">
   <proof prover="0" memlimit="2000"><undone/></proof>
   <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="5497893"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="1604908"/></proof>
   </goal>
   <goal name="min_color_list&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="2"><result status="valid" time="0.08" steps="13117"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="get_free_state&#39;vc" expl="VC for get_free_state">
 <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="573711"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="53508"/></proof>
 <transf name="split_vc" >
  <goal name="get_free_state&#39;vc.0" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.01" steps="0"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.10" steps="12409"/></proof>
  </goal>
  <goal name="get_free_state&#39;vc.1" expl="variant decrease">
  <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="6"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.10" steps="12601"/></proof>
  </goal>
  <goal name="get_free_state&#39;vc.2" expl="variant decrease">
  <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="6"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.10" steps="12597"/></proof>
  </goal>
  <goal name="get_free_state&#39;vc.3" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.03" steps="36"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.18" steps="16338"/></proof>
  </goal>
  <goal name="get_free_state&#39;vc.4" expl="postcondition">
  <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="687601"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="56847"/></proof>
  <transf name="split_vc" >
   <goal name="get_free_state&#39;vc.4.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="29"/></proof>
   <proof prover="2" obsolete="true"><result status="valid" time="0.16" steps="14853"/></proof>
   </goal>
   <goal name="get_free_state&#39;vc.4.1" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="1" timelimit="10" memlimit="4000" obsolete="true"><result status="failure" time="0.00"/></proof>
   <proof prover="2" timelimit="10" memlimit="4000" obsolete="true"><result status="timeout" time="10.00" steps="1386390"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="min_color&#39;vc" expl="VC for min_color">
 <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="1442941"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="123495"/></proof>
 <transf name="split_vc" >
  <goal name="min_color&#39;vc.0" expl="loop invariant init">
  <proof prover="0"><result status="valid" time="0.01" steps="2"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.14" steps="12171"/></proof>
  </goal>
  <goal name="min_color&#39;vc.1" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.02" steps="18"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.17" steps="14072"/></proof>
  </goal>
  <goal name="min_color&#39;vc.2" expl="loop variant decrease">
  <proof prover="0"><result status="valid" time="0.02" steps="8"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.12" steps="14573"/></proof>
  </goal>
  <goal name="min_color&#39;vc.3" expl="loop invariant preservation">
  <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="902557"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="187797"/></proof>
  <transf name="split_vc" >
   <goal name="min_color&#39;vc.3.0" expl="loop invariant preservation">
   <proof prover="0"><result status="timeout" time="5.00"/></proof>
   <proof prover="1" timelimit="10" memlimit="4000" obsolete="true"><result status="failure" time="0.00"/></proof>
   <proof prover="2" timelimit="10" memlimit="4000" obsolete="true"><result status="timeout" time="10.00" steps="1622591"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="min_color&#39;vc.4" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.02" steps="8"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.17" steps="13737"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="contains&#39;vc" expl="VC for contains">
 <proof prover="0" timelimit="1" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.00" steps="739707"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="113173"/></proof>
 <transf name="split_vc" >
  <goal name="contains&#39;vc.0" expl="loop invariant init">
  <proof prover="0"><result status="valid" time="0.02" steps="4"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.11" steps="12469"/></proof>
  </goal>
  <goal name="contains&#39;vc.1" expl="index in array bounds">
  <proof prover="0"><result status="valid" time="0.01" steps="6"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.12" steps="14232"/></proof>
  </goal>
  <goal name="contains&#39;vc.2" expl="loop invariant preservation">
  <proof prover="0"><result status="valid" time="0.01" steps="14"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.12" steps="12702"/></proof>
  </goal>
  <goal name="contains&#39;vc.3" expl="loop invariant preservation">
  <proof prover="0"><result status="valid" time="0.02" steps="17"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.18" steps="14074"/></proof>
  </goal>
  <goal name="contains&#39;vc.4" expl="postcondition">
  <proof prover="0"><result status="timeout" time="5.00"/></proof>
  <proof prover="1" timelimit="10" memlimit="4000" obsolete="true"><result status="timeout" time="10.00" steps="6065028"/></proof>
  <proof prover="2" timelimit="10" memlimit="4000" obsolete="true"><result status="unknown" time="0.36" steps="25049"/></proof>
  </goal>
  <goal name="contains&#39;vc.5" expl="postcondition">
  <proof prover="0"><result status="valid" time="0.02" steps="2"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.12" steps="14205"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="MaxAndSum">
 <goal name="max_sum&#39;vc" expl="VC for max_sum">
 </goal>
</theory>
<theory name="Russian">
 <goal name="odd&#39;vc" expl="VC for odd">
 </goal>
 <goal name="half&#39;vc" expl="VC for half">
 </goal>
 <goal name="mult&#39;vc" expl="VC for mult">
 </goal>
 <goal name="pow_help">
 </goal>
 <goal name="pow&#39;vc" expl="VC for pow">
 </goal>
 <goal name="main&#39;vc" expl="VC for main">
 </goal>
</theory>
<theory name="Selectionsort">
 <goal name="minindex&#39;vc" expl="VC for minindex">
 </goal>
 <goal name="sort&#39;vc" expl="VC for sort">
 </goal>
 <goal name="sort&#39;&#39;vc" expl="VC for sort&#39;">
 </goal>
</theory>
<theory name="SimpleInsertionSort">
 <goal name="sort&#39;vc" expl="VC for sort">
 </goal>
</theory>
<theory name="FancyInsertionsort">
 <goal name="lfind&#39;vc" expl="VC for lfind">
 </goal>
 <goal name="shift&#39;vc" expl="VC for shift">
 </goal>
 <goal name="sort&#39;vc" expl="VC for sort">
 </goal>
 <goal name="bfind&#39;vc" expl="VC for bfind">
 </goal>
 <goal name="sortb&#39;vc" expl="VC for sortb">
 </goal>
</theory>
<theory name="BubbleSort">
 <goal name="sort&#39;vc" expl="VC for sort">
 </goal>
 <goal name="sort2&#39;vc" expl="VC for sort2">
 </goal>
</theory>
</file>
</why3session>
